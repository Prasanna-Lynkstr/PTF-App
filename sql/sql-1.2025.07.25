CREATE TABLE event_logs (
  id SERIAL PRIMARY KEY,
  type VARCHAR(100) NOT NULL,            -- e.g., system, auth, db, api
  level VARCHAR(50) NOT NULL,            -- info, warn, error
  message VARCHAR(1024) NOT NULL,
  metadata JSONB DEFAULT '{}',
  source VARCHAR(100),                   -- e.g., file/module name
  organization_id VARCHAR(100),
  ip_address VARCHAR(100),
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);


CREATE TABLE organizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  full_name VARCHAR(255) NOT NULL,
  company_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  is_email_verified BOOLEAN NOT NULL DEFAULT FALSE,
  official_website VARCHAR(255),
  verification_document_url VARCHAR(512),
  accept_terms BOOLEAN NOT NULL DEFAULT TRUE,
  signup_source VARCHAR(100),
  api_key VARCHAR(255) NOT NULL UNIQUE,
  verification_code VARCHAR(255),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  is_active BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE organization_settings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID NOT NULL REFERENCES organizations(id),
  key VARCHAR(100) NOT NULL,
  value VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE organization_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID NOT NULL UNIQUE REFERENCES organizations(id),
  logo_url VARCHAR(512),
  cover_image_url VARCHAR(512),
  about VARCHAR(2000),
  mission VARCHAR(1000),
  vision VARCHAR(1000),
  website VARCHAR(255),
  contact_email VARCHAR(255),
  contact_phone VARCHAR(50),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Drop tables if they exist
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS user_roles;

-- Create user_roles table
CREATE TABLE user_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(50) NOT NULL UNIQUE,
    label VARCHAR(100),
    description VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT now()
);

INSERT INTO user_roles (id, name, label, description, is_active, created_at)
VALUES (
  gen_random_uuid(), -- Make sure pgcrypto extension is enabled
  'orgAdmin',
  'Organization Admin',
  'Administrator for the organization',
  true,
  NOW()
);



-- Create users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    org_id UUID REFERENCES organizations(id) ON DELETE SET NULL,
    role_id UUID NOT NULL REFERENCES user_roles(id),
    is_email_verified BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    last_login_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    signup_source VARCHAR(100)
);

ALTER TABLE organization_profiles
ADD COLUMN year_founded VARCHAR(10),
ADD COLUMN headquarters VARCHAR(255),
ADD COLUMN number_of_employees VARCHAR(50),
ADD COLUMN org_type VARCHAR(100);


CREATE TABLE org_teams (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  team_name VARCHAR(100) NOT NULL,
  org_id UUID REFERENCES organizations(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now()
);

ALTER TABLE users
ADD COLUMN team_id UUID DEFAULT NULL,
ADD CONSTRAINT fk_users_team_id FOREIGN KEY (team_id) REFERENCES org_teams(id) ON DELETE SET NULL;

ALTER TABLE user_roles
ADD COLUMN org_id UUID,
ADD CONSTRAINT user_roles_org_id_fkey
  FOREIGN KEY (org_id)
  REFERENCES organizations(id)
  ON DELETE SET NULL;

  -- Recruiter
INSERT INTO user_roles (id, name, label, description, is_active, created_at)
VALUES (
  gen_random_uuid(),
  'recruiter',
  'Recruiter',
  'User responsible for sourcing and managing candidates',
  true,
  NOW()
);

-- Interview Scheduler
INSERT INTO user_roles (id, name, label, description, is_active, created_at)
VALUES (
  gen_random_uuid(),
  'interviewScheduler',
  'Interview Scheduler',
  'User who manages scheduling of interviews and coordination',
  true,
  NOW()
);

-- Hiring Manager
INSERT INTO user_roles (id, name, label, description, is_active, created_at)
VALUES (
  gen_random_uuid(),
  'hiringManager',
  'Hiring Manager',
  'Decision-maker for hiring candidates in a department or team',
  true,
  NOW()
);

-- Panelist
INSERT INTO user_roles (id, name, label, description, is_active, created_at)
VALUES (
  gen_random_uuid(),
  'panelist',
  'Panelist',
  'User who participates in interview panels to assess candidates',
  true,
  NOW()
);

CREATE TABLE activity_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  actor_id UUID REFERENCES users(id),
  actor_name TEXT,
  action TEXT NOT NULL,
  description TEXT,
  entity_type TEXT,
  entity_id UUID,
  performed_by TEXT NOT NULL, -- 'user' or 'system'
  org_id UUID REFERENCES organizations(id),
  created_at TIMESTAMPTZ DEFAULT NOW()
);